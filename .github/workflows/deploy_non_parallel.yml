name: Deploy to Debian Server (non-parallel)
on:
  workflow_dispatch:
    inputs:
      DEPLOY_BRANCH:
        description: "Branch to use for deployment"
        required: true
        default: "main"
      SELF_SIGNED_SSL:
        description: "When true: generate a self-signed SSL certificate; when false: use certbot to get a certificate."
        type: choice
        options:
          - "true"
          - "false"
        default: "false"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.DEPLOY_BRANCH }}

      - name: Generate .env files
        run: |
          echo "Create .env.deploy.local"
          # Variables for configuring the platform
          echo NODE_ENV="production" >.env.deploy.local
          echo DDS_ENV="production" >>.env.deploy.local
          echo DDS_WEBSITE_URL="${{ secrets.DDS_WEBSITE_URL }}" >>.env.deploy.local
          echo DDS_EMAIL="${{ secrets.DDS_EMAIL }}" >>.env.deploy.local
          echo DATABASE_URL="${{ secrets.DATABASE_URL }}" >>.env.deploy.local
          echo JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" >>.env.deploy.local
          echo FRONTEND_URL="https://${{ secrets.DDS_WEBSITE_URL }}" >>.env.deploy.local
          echo APP_SURVEY_MONKEY_CLIENT_ID="${{ secrets.APP_SURVEY_MONKEY_CLIENT_ID }}" >>.env.deploy.local
          echo APP_SURVEY_MONKEY_CLIENT_SECRET="${{ secrets.APP_SURVEY_MONKEY_CLIENT_SECRET }}" >>.env.deploy.local
          echo REACT_APP_API_URL="https://${{ secrets.DDS_WEBSITE_URL }}/api" >>.env.deploy.local
          echo REACT_APP_FRONTEND_URL="https://${{ secrets.DDS_WEBSITE_URL }}" >>.env.deploy.local
          echo SELF_SIGNED_SSL="${{ github.event.inputs.SELF_SIGNED_SSL }}" >>.env.deploy.local

          echo "Generate .env.production.local for backend and frontend"
          echo DATABASE_URL="${{ secrets.DATABASE_URL }}" >ddsurveys/.env.production.local
          echo JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" >>ddsurveys/.env.production.local
          echo FRONTEND_URL="https://${{ secrets.DDS_WEBSITE_URL }}" >>ddsurveys/.env.production.local
          echo APP_SURVEY_MONKEY_CLIENT_ID="${{ secrets.APP_SURVEY_MONKEY_CLIENT_ID }}" >>ddsurveys/.env.production.local
          echo APP_SURVEY_MONKEY_CLIENT_SECRET="${{ secrets.APP_SURVEY_MONKEY_CLIENT_SECRET }}" >>ddsurveys/.env.production.local
          echo REACT_APP_API_URL="https://${{ secrets.DDS_WEBSITE_URL }}/api" >frontend/.env
          echo REACT_APP_FRONTEND_URL="https://${{ secrets.DDS_WEBSITE_URL }}" >>frontend/.env
          echo REACT_APP_API_URL="https://${{ secrets.DDS_WEBSITE_URL }}/api" >frontend/.env.production.local
          echo REACT_APP_FRONTEND_URL="https://${{ secrets.DDS_WEBSITE_URL }}" >>frontend/.env.production.local

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        working-directory: frontend
        continue-on-error: true
        run: npm list

      - name: Install frontend dependencies
        working-directory: frontend
        run: |
          npm install

      - name: Build the Frontend
        working-directory: frontend
        env:
          NODE_ENV: production
        run: |
          npm run build-extras
          npm run update-browserslist
          npm run build

      - name: Prepare SSH
        env:
          ssh_address: "${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}"
        run: |
          mkdir -v -m 700 "$HOME/.ssh"
          ssh-keyscan -H "${{ secrets.SERVER_HOST }}" > "$HOME/.ssh/known_hosts"
          echo "${{ secrets.SERVER_SSH_KEY }}" > "$HOME/.ssh/id_rsa"
          chmod 400 "$HOME/.ssh/id_rsa"
          echo "echo \"${{ secrets.SERVER_SSH_KEY_PASSPHRASE }}\"" > "$HOME/.ssh_askpass" && chmod +x "$HOME/.ssh_askpass"
          SSH_ASKPASS_REQUIRE=force SSH_ASKPASS="$HOME/.ssh_askpass" ssh-add "$HOME/.ssh/id_rsa"

      - name: Stop deployment docker and remove old project files/directories
        run: |
          ssh -i "$HOME/.ssh/id_rsa" "${server_address}" <<EOF
          mkdir -p dds/volumes
          cd dds
          if [ -f compose.gh-actions.yml ]; then
            sudo docker compose -f compose.gh-actions.yml down
          fi
          cd ..
          mv dds/volumes ./
          sudo rm -rf ./dds
          mkdir dds
          mv ./volumes ./dds/
          EOF

      - name: Copy the project to the server
        run: |
          scp -o BatchMode=yes -B -i "$HOME/.ssh/id_rsa" -r -p * .* "${ssh_address}:dds/"

      - name: Build the static frontend pages
        run: |
          ssh -i "$HOME/.ssh/id_rsa" "${server_address}" <<EOF
          cd "~/dds/frontend"
          NODE_ENV=production bash -c 'npm run snap'
          EOF

      - name: Run the project on the server
        run: |
          ssh -i "$HOME/.ssh/id_rsa" "${server_address}" <<EOF
          cd "~/dds"
          sudo docker compose --env-file .env.deployment.local -f compose.gh-actions.yml up --build -d
          sudo docker system prune -a -f
          EOF
