name: Deploy to Debian Server

on:
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: main

    - name: Generate .env.production.local for ddsurveys and frontend.
      run: |
        echo DATABASE_URL="${{ secrets.DATABASE_URL }}" > ddsurveys/.env.production.local
        echo JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" >> ddsurveys/.env.production.local
        echo FRONTEND_URL="${{ secrets.FRONTEND_URL }}" >> ddsurveys/.env.production.local
        echo APP_SURVEY_MONKEY_CLIENT_ID="${{ secrets.APP_SURVEY_MONKEY_CLIENT_ID }}" >> ddsurveys/.env.production.local
        echo APP_SURVEY_MONKEY_CLIENT_SECRET="${{ secrets.APP_SURVEY_MONKEY_CLIENT_SECRET }}" >> ddsurveys/.env.production.local
        echo REACT_APP_API_URL="${{ secrets.REACT_APP_API_URL }}" > frontend/.env
        echo REACT_APP_FRONTEND_URL="${{ secrets.FRONTEND_URL }}" >> frontend/.env
        echo REACT_APP_API_URL="${{ secrets.REACT_APP_API_URL }}" > frontend/.env.production.local
        echo REACT_APP_FRONTEND_URL="${{ secrets.FRONTEND_URL }}" >> frontend/.env.production.local

    - name: Cache node modules
      id: cache-npm
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          ${{ runner.os }}-

    - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
      name: List the state of node modules
      working-directory: frontend
      continue-on-error: true
      run: npm list

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm install

    - name: Build the Frontend
      working-directory: frontend
      env:
        NODE_ENV: production
      run: |
        npm run build-extras
        npm run update-browserslist
        npm run build

#    - name: Serve the build directory for react-snap
#      working-directory: frontend
#      run: npm run serve-build &
#
#    - name: Wait for the server to be ready
#      working-directory: frontend
#      run: npx wait-on http://localhost:3000
#
#    - name: Run react-snap to pre-render static pages
#      working-directory: frontend
#      run: npm run snap

    - name: Copy the project to the server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }} # SSH private key
        passphrase: ${{ secrets.SERVER_SSH_KEY_PASSPHRASE }} # Passphrase for the private key
        source: "*"
        target: "/home/admin/dds"

    - name: Build the static frontend pages
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }} # SSH private key
        passphrase: ${{ secrets.SERVER_SSH_KEY_PASSPHRASE }} # Passphrase for the private key
        script: |
          cd /home/admin/dds/frontend
          npm run serve-build &
          npx wait-on http://localhost:5555
          npm run snap
          pkill -f "serve"

    - name: Grant Execute Permissions to Entrypoints
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }} # SSH private key
        passphrase: ${{ secrets.SERVER_SSH_KEY_PASSPHRASE }} # Passphrase for the private key
        script: |
          cd /home/admin/dds
          sudo chmod +x ./volumes/certbot/certbot-entrypoint.sh
          sudo chmod +x ./volumes/nginx/nginx-entrypoint.sh
          sudo chmod +x ./ddsurveys/entrypoint.sh

    - name: Run the project on the server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }} # SSH private key
        passphrase: ${{ secrets.SERVER_SSH_KEY_PASSPHRASE }} # Passphrase for the private key
        script: |
          cd /home/admin/dds
          sudo docker compose down
          sudo docker compose up --build -d
          sudo docker system prune -a -f
